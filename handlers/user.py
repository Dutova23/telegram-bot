import logging
import traceback
import io
from io import BytesIO
from aiogram import types, Router, F
from aiogram.types import ReplyKeyboardMarkup, InputFile, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from states import RegistrationForm, ApplicationForm
from bot import dp, bot
from db import get_db_pool  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É–ª—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ö—Ç–æ –º—ã?ü™¥")],
        [KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë®üèª‚Äçüíª")],
        [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüñ•Ô∏è")],
        [KeyboardButton(text="–ü–æ–º–æ—â—åü§ù")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è")],
    ],
    resize_keyboard=True
)

# ‚úÖ –†–æ—É—Ç–µ—Ä
router = Router()


@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.message(F.text.lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –∫—Ç–æ –º—ã?ü™¥")
async def send_info(message: types.Message):
    info_text = (
        "üåç **–ó–∞—â–∏—Ç–Ω–∏–∫ –ø—Ä–∏—Ä–æ–¥—ã** ‚Äì —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚óè –£–∑–Ω–∞—Ç—å –æ–± —ç–∫–æ–ª–æ–≥–∏–∏\n"
        "‚óè –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç–∫–æ-–¥–≤–∏–∂–µ–Ω–∏—é\n"
        "‚óè –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n"
        "üíö –í–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º –º–∏—Ä —á–∏—â–µ!"
    )
    await message.answer(info_text, parse_mode="Markdown")


@router.message(F.text.lower() == "üìù —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    await state.set_state(RegistrationForm.email)


@router.message(RegistrationForm.email, F.text)
async def save_user_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if "@" not in email or "." not in email:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email.")
        return

    user_id = message.from_user.id
    db_pool = get_db_pool()
    if db_pool is None:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db_pool.acquire() as conn:
        try:
            async with conn.transaction():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Telegram ID
                existing_by_id = await conn.fetchrow("SELECT * FROM users WHERE id = $1", user_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ email (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç)
                existing_by_email = await conn.fetchrow("SELECT * FROM users WHERE email = $1", email)

                if existing_by_id:
                    await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!")
                    await state.clear()
                    return

                if existing_by_email:
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –≤–µ–±-—É—á–µ—Ç–∫–µ
                    await conn.execute(
                        "UPDATE users SET id = $1 WHERE email = $2", user_id, email
                    )
                    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ ‚Äî Telegram-–∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–µ–±-–ø—Ä–æ—Ñ–∏–ª—é!", reply_markup=keyboard)
                else:
                    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    await conn.execute("""
                        INSERT INTO users (id, email, password_hash, first_name)
                        VALUES ($1, $2, $3, $4)
                    """, user_id, email, 'default', 'default')
                    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=keyboard)

                await state.clear()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}\n{traceback.format_exc()}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë®üèª‚Äçüíª")
async def user_profile(message: types.Message):
    user_id = message.from_user.id
    db_pool = get_db_pool()
    if db_pool is None:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db_pool.acquire() as conn:
        try:
            user_data = await conn.fetchrow("SELECT * FROM users WHERE id = $1", user_id)

            if not user_data:
                register_keyboard = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
                    resize_keyboard=True
                )
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=register_keyboard)
                return

            application_count = await conn.fetchval(
                "SELECT COUNT(*) FROM applications WHERE user_id = $1", user_id
            )

            coins = user_data.get("coins", 0)


            profile_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìå –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="take_task")],
                    [InlineKeyboardButton(text="üñº –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")],
                    [InlineKeyboardButton(text="üóë —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è", callback_data="delete_user")]
                ]
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            via_bot = user_data["id"] is not None
            via_web = user_data["email"] and user_data["password_hash"] and user_data["password_hash"] != "default"

            if via_bot and via_web:
                origin = "üì± –ë–æ—Ç –∏ üåê –í–µ–±"
            elif via_bot:
                origin = "üì± –¢–æ–ª—å–∫–æ –±–æ—Ç"
            elif via_web:
                origin = "üåê –¢–æ–ª—å–∫–æ –≤–µ–±"
            else:
                origin = "‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

            text = (
                f"üÜî –í–∞—à ID: {user_data['id']}\n"
                f"üë§ –õ–æ–≥–∏–Ω: {message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìß Email: {user_data['email'] or '‚Äî'}\n"
                f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏: {application_count}\n"
                f"üí∞ –ú–æ–Ω–µ—Ç—ã: {coins}\n"
                f"üõ° –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑: {origin}"
            )
            await message.answer(text, reply_markup=profile_keyboard)

        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data == "submit_application")
async def application_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞.")
    await state.set_state(ApplicationForm.photo)


@router.message(ApplicationForm.photo, F.photo)
async def save_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞.")
    await state.set_state(ApplicationForm.description)


@router.message(ApplicationForm.description, F.text)
async def save_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if not description:
        await message.answer("‚ùó –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return

    await state.update_data(description=description)
    await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
    await state.set_state(ApplicationForm.location)


@router.message(ApplicationForm.location, F.location)
async def save_location(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    latitude, longitude = message.location.latitude, message.location.longitude
    description, photo = data.get("description"), data.get("photo")

    db_pool = get_db_pool()
    if db_pool is None:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db_pool.acquire() as conn:
        try:
            async with conn.transaction():
                photo_bytes = photo.encode("utf-8")
                await conn.execute(
                    """
                    INSERT INTO applications (user_id, location, description, photo)
                    VALUES ($1, ST_SetSRID(ST_MakePoint($2, $3), 4326), $4, $5)
                    """,
                    user_id, longitude, latitude, description, photo_bytes
                    )



            await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            await state.clear()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}\n{traceback.format_exc()}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.text.lower() == "üóë —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è")
async def delete_user(message: types.Message):
    user_id = message.from_user.id

    db_pool = get_db_pool()
    if db_pool is None:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db_pool.acquire() as conn:
        try:
            await conn.execute("DELETE FROM applications WHERE user_id = $1", user_id)
            result = await conn.execute("DELETE FROM users WHERE id = $1", user_id)

            if result == "DELETE 0":
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                await message.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}\n{traceback.format_exc()}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")





@router.callback_query(lambda c: c.data == "delete_user")
async def delete_user_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    db_pool = get_db_pool()
    if db_pool is None:
        await callback.message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db_pool.acquire() as conn:
        try:
            await conn.execute("DELETE FROM applications WHERE user_id = $1", user_id)
            result = await conn.execute("DELETE FROM users WHERE id = $1", user_id)

            if result == "DELETE 0":
                await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                await callback.message.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (callback): {e}\n{traceback.format_exc()}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(lambda c: c.data == "take_task")
async def show_random_task(callback: types.CallbackQuery):
    db_pool = get_db_pool()
    if db_pool is None:
        await callback.message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    async with db_pool.acquire() as conn:
        task = await conn.fetchrow("""
            SELECT id, description, photo, ST_AsText(location) AS location
            FROM applications
            ORDER BY RANDOM()
            LIMIT 1
        """)

        if not task:
            await callback.message.answer("‚ùå –ó–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = task["description"]

        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        try:
            photo_bytes = task["photo"]
            photo_file = InputFile(io.BytesIO(photo_bytes), filename="photo.jpg")
            caption_text = f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}"
            await callback.message.answer_photo(photo_file, caption=caption_text, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            await callback.message.answer(f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}", parse_mode="Markdown")

        # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        try:
            coords = task["location"].replace("POINT(", "").replace(")", "").split()
            longitude, latitude = map(float, coords)
            await callback.message.answer_location(latitude=latitude, longitude=longitude)
            await callback.message.answer("üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* –æ—Ç–º–µ—á–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ.", parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {e}")

        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="take_task")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
            await callback.message.answer("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_user(dp):
    dp.include_router(router)
    dp.message.register(start_handler, Command('start'))
    dp.message.register(send_info, lambda message: (message.text or "").lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –∫—Ç–æ –º—ã?ü™¥")
    dp.message.register(user_profile, lambda message: (message.text or "").lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë®üèª‚Äçüíª")
    dp.message.register(delete_user, lambda message: (message.text or "").lower() == "üóë —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è")
    dp.message.register(start_registration, lambda message: (message.text or "").lower() == "üìù —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    dp.callback_query.register(show_random_task, lambda c: c.data == "take_task")
    dp.callback_query.register(back_to_menu, lambda c: c.data == "back_to_menu")



    dp.message.register(save_user_email, RegistrationForm.email)
    dp.callback_query.register(delete_user_callback, lambda c: c.data == "delete_user")



